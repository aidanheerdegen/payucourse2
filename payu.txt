=====================
Shiney new Payu stuff
=====================

:subtitle: New and upcoming features
:author: Aidan Heerdegen
:description: A training course to introduce new and upcoming features
:date: 17 October 2018



What is Payu?
=============

Payu is
-------

 ... a python based "scientific workflow manager"

Huh?
----

That means it runs your model for you. in short:

* Setup model run directory
* Run the model
* Move outputs/restarts to an archive directory
* Clean up the run directory
* Run again (if instructed to do so)
  

Using Payu
==========

Using an experiment
-------------------

(Recap from last week)

Clone an existing experiment (usually in ``$HOME``):

.. code:: sh

   cd $HOME
   mkdir -p mom
   cd mom
   git clone /short/public/mxw900/payucourse/expt/bowl1

This is the "*control directory*" for ``bowl1``


Run the experiment
------------------

Use the system payu::

   module load payu/0.9.2

This job is pre-configured, run it!

.. code:: sh

   cd bowl1
   payu run

* Model will run in ``work/``

* Output saved to ``archive/``


New features
============

Fast MOM (FMS) collation
------------------------

There is a new mppnccombine in town ... and it's fast.

How fast? 

----

Probably not faster than the Waco Kid

.. image:: img/waco_kid.gif


----

But seriously fast, hence the name **mppnccombine-fast**

https://github.com/coecms/mppnccombine-fast

* Written by Scott Wales

* Collates (combines) any FMS model output (MOM5/MOM6/GOLD) that is tiled, that is output to multiple files to make input and output faster

* Designed to be particularly fast with netCDF4 compressed data, as it directly copies the compressed chunks from one file to another, skipping the decompress/recompress step


Requirements
------------

* `mppnccombine-fast` executable. Either copy from `/short/public/access-om2/mppnccombine-fast` or grab the source code and compile yourself

* Place where your model config will find it, either in `/short/$PROJECT/$model/bin` or somewhere else and specify the fullpath in the `config.yaml` (see later) 

* A version of `payu` of `0.10` or greater (`module load payu/0.10` on `raijin`)

* Updated `config.yaml` syntax


New Syntax
----------

The new syntax replaces the kludgey and horrible every expanding set of options with `collate_` prepended to them.

Old syntax:

```yaml
collate: true
collate_mem: 16GB
collate_queue: express
collate_ncpus: 4
collate_flags: -n4 -r
```

New syntax:

```yaml
collate:
     enable: true
     queue: express
     mpi: true
     ncpus: 4
     threads: 2
     flags: -n4 -r
     # exe: /full/path/to/mppnccombine-fast
```

Resource requirements
---------------------

Memory use is modest, and should only depend on chunksize in the compressed file, not on the overall size of the 
file being written, so resolution independent.

Unfortunately a memory leak bug in the underlying `HDF5` library means memory use will go up with the number of 
times data is written to a collated file. It is difficult to predict, but 2-4GB per thread has been the upper 
limit observed so far.

Time should be minutes.

No speed-up for low resolution outputs (MPI overhead swamps fast run times). Quarter degree 10-50x faster. Tenth 
100x faster.


Upcoming features
=================

File Tracking
-------------

Wanted to do this since forever.


ACCESS-OM2 Model Configs
========================


The ACCESS-OM2 There is a model hierarchy from 1 degree global to 0.1 degree global, Ocean/Ice
model forced with atmospheric data.

Ocean Model is `MOM5`, ice is modified `CICE5`, atmosphere is `libaccessom2`, coupler is 
a modified version of `OASIS3-MCT`.

https://github.com/mom-ocean/MOM5
https://github.com/OceansAus/cice5
https://github.com/OceansAus/libaccessom2
https://github.com/OceansAus/oasis3-mct

All are wrapped up into a single `access-om` repository

https://github.com/OceansAus/access-om2


ACCESS-OM2-01
-------------

Nominal 1 degree global resolution


Forcing Data
------------

JRA-55-do RYF and IAF (1955-present)


